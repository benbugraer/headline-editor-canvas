{"version":3,"sources":["../src/components/HeadlineEditor.tsx"],"names":[],"mappings":";;;;AAIO,IAAM,iBAAgD,CAAC;AAAA,EAC5D,YAAe,GAAA,IAAA;AAAA,EACf,aAAgB,GAAA,GAAA;AAAA,EAChB,MAAA;AAAA,EACA,OAAA;AAAA,EACA,sBAAyB,GAAA,SAAA;AAAA,EACzB,iBAAoB,GAAA,OAAA;AAAA,EACpB,eAAkB,GAAA,EAAA;AAAA,EAClB,gBAAmB,GAAA;AACrB,CAAM,KAAA;AACJ,EAAM,MAAA,SAAA,GAAY,OAA0B,IAAI,CAAA;AAChD,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAI,QAAsB,CAAA;AAAA,IAC1D,MAAQ,EAAA,IAAA;AAAA,IACR,eAAiB,EAAA,sBAAA;AAAA,IACjB,SAAS;AAAC,GACX,CAAA;AAED,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,UAAU,OAAS,EAAA;AACrB,MAAA,MAAM,MAAS,GAAA,IAAW,MAAO,CAAA,MAAA,CAAA,SAAA,CAAU,OAAS,EAAA;AAAA,QAClD,KAAO,EAAA,YAAA;AAAA,QACP,MAAQ,EAAA,aAAA;AAAA,QACR,eAAiB,EAAA;AAAA,OAClB,CAAA;AAED,MAAA,cAAA,CAAe,CAAC,IAAU,MAAA,EAAE,GAAG,IAAA,EAAM,QAAS,CAAA,CAAA;AAE9C,MAAA,OAAO,MAAM;AACX,QAAA,MAAA,CAAO,OAAQ,EAAA;AAAA,OACjB;AAAA;AACF,GACC,EAAA,CAAC,YAAc,EAAA,aAAA,EAAe,sBAAsB,CAAC,CAAA;AAExD,EAAA,MAAM,UAAU,MAAM;AACpB,IAAA,IAAI,YAAY,MAAQ,EAAA;AACtB,MAAM,MAAA,IAAA,GAAO,IAAW,MAAA,CAAA,KAAA,CAAM,YAAc,EAAA;AAAA,QAC1C,IAAM,EAAA,GAAA;AAAA,QACN,GAAK,EAAA,GAAA;AAAA,QACL,UAAY,EAAA,iBAAA;AAAA,QACZ,QAAU,EAAA,eAAA;AAAA,QACV,IAAM,EAAA;AAAA,OACP,CAAA;AACD,MAAY,WAAA,CAAA,MAAA,CAAO,IAAI,IAAI,CAAA;AAC3B,MAAY,WAAA,CAAA,MAAA,CAAO,gBAAgB,IAAI,CAAA;AACvC,MAAA,WAAA,CAAY,OAAO,SAAU,EAAA;AAAA;AAC/B,GACF;AAEA,EAAA,MAAM,aAAa,MAAM;AACvB,IAAI,IAAA,WAAA,CAAY,UAAU,MAAQ,EAAA;AAChC,MAAM,MAAA,OAAA,GAAU,WAAY,CAAA,MAAA,CAAO,SAAU,CAAA;AAAA,QAC3C,MAAQ,EAAA,KAAA;AAAA,QACR,OAAS,EAAA,CAAA;AAAA,QACT,UAAY,EAAA;AAAA,OACb,CAAA;AACD,MAAA,MAAA,CAAO,OAAO,CAAA;AAAA;AAChB,GACF;AAEA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,SAAU,EAAA,iBAAA,EAAA,sCACZ,KAAI,EAAA,EAAA,SAAA,EAAU,SACb,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,QAAO,EAAA,EAAA,OAAA,EAAS,OAAS,EAAA,EAAA,YAAU,mBACnC,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,EAAO,OAAS,EAAA,UAAA,EAAA,EAAY,QAAM,CAAA,EAClC,OAAW,oBAAA,KAAA,CAAA,aAAA,CAAC,YAAO,OAAS,EAAA,OAAA,EAAA,EAAS,OAAK,CAC7C,CACA,kBAAA,KAAA,CAAA,aAAA,CAAC,QAAO,EAAA,EAAA,GAAA,EAAK,WAAW,CAC1B,CAAA;AAEJ","file":"index.mjs","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as fabric from \"fabric\";\r\nimport { HeadlineEditorProps, CanvasState } from \"../types\";\r\n\r\nexport const HeadlineEditor: React.FC<HeadlineEditorProps> = ({\r\n  initialWidth = 1200,\r\n  initialHeight = 630,\r\n  onSave,\r\n  onClose,\r\n  defaultBackgroundColor = \"#ffffff\",\r\n  defaultFontFamily = \"Arial\",\r\n  defaultFontSize = 48,\r\n  defaultTextColor = \"#000000\",\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [canvasState, setCanvasState] = useState<CanvasState>({\r\n    canvas: null,\r\n    backgroundColor: defaultBackgroundColor,\r\n    objects: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const canvas = new fabric.Canvas(canvasRef.current, {\r\n        width: initialWidth,\r\n        height: initialHeight,\r\n        backgroundColor: defaultBackgroundColor,\r\n      });\r\n\r\n      setCanvasState((prev) => ({ ...prev, canvas }));\r\n\r\n      return () => {\r\n        canvas.dispose();\r\n      };\r\n    }\r\n  }, [initialWidth, initialHeight, defaultBackgroundColor]);\r\n\r\n  const addText = () => {\r\n    if (canvasState.canvas) {\r\n      const text = new fabric.IText(\"Yeni Metin\", {\r\n        left: 100,\r\n        top: 100,\r\n        fontFamily: defaultFontFamily,\r\n        fontSize: defaultFontSize,\r\n        fill: defaultTextColor,\r\n      });\r\n      canvasState.canvas.add(text);\r\n      canvasState.canvas.setActiveObject(text);\r\n      canvasState.canvas.renderAll();\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (canvasState.canvas && onSave) {\r\n      const dataUrl = canvasState.canvas.toDataURL({\r\n        format: \"png\",\r\n        quality: 1,\r\n        multiplier: 2,\r\n      });\r\n      onSave(dataUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"headline-editor\">\r\n      <div className=\"toolbar\">\r\n        <button onClick={addText}>Metin Ekle</button>\r\n        <button onClick={handleSave}>Kaydet</button>\r\n        {onClose && <button onClick={onClose}>Kapat</button>}\r\n      </div>\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n"]}